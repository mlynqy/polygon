import re, sqlite3, requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

TELEGRAM_TOKEN = 'token'
POLYGONSCAN_API_KEY = '密钥'
DB_FILE = 'db.sqlite3'
CHECK_INTERVAL = 10  # 秒

TOKEN_CONTRACTS = {
    '0xc2132d05d31c914a87c6611c10748aeb04b58e8f': 'USDT',
    '0x3c499c542cef5e3811e1192ce70d8cc03d5c3359': 'USDC',
    '0x455e53cbb86018ac2b8092fdcd39d8444affc3f6': 'POL',
}

def init_db():
    conn = sqlite3.connect(DB_FILE); c = conn.cursor()
    c.execute('''
      CREATE TABLE IF NOT EXISTS bindings (
        chat_id INTEGER NOT NULL,
        address TEXT NOT NULL,
        remark TEXT, last_tx TEXT, last_token_tx TEXT,
        PRIMARY KEY(chat_id, address)
      )''')
    conn.commit(); conn.close()

def get_db_conn():
    return sqlite3.connect(DB_FILE)

async def bind_address(update, ctx, addr, remark):
    chat = update.message.chat_id; addr = addr.lower()
    conn = get_db_conn(); c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO bindings(chat_id,address,remark) VALUES(?,?,?)',(chat,addr,remark))
    conn.commit(); conn.close()
    await update.message.reply_text(f"✅ 已绑定：{addr}\n📌 备注：{remark or '无备注'}")

async def unbind_address(update, ctx, addr):
    chat = update.message.chat_id; addr = addr.lower()
    conn = get_db_conn(); c = conn.cursor()
    c.execute('DELETE FROM bindings WHERE chat_id=? AND address=?',(chat,addr))
    conn.commit(); cnt = c.rowcount; conn.close()
    await update.message.reply_text("✅ 已解绑："+addr if cnt else "⚠️ 未找到绑定："+addr)

async def list_bindings(update, ctx):
    chat = update.message.chat_id
    conn = get_db_conn(); c = conn.cursor()
    rows = c.execute('SELECT address,remark FROM bindings WHERE chat_id=?',(chat,)).fetchall()
    conn.close()
    if not rows:
        return await update.message.reply_text("📭 无绑定地址")
    text = "📦 你的绑定：\n\n"
    for a,r in rows:
        text += f"🔗 {a}\n📝 {r or '无备注'}\n\n"
    await update.message.reply_text(text)

def get_latest_tx(addr):
    r = requests.get(
        f'https://api.polygonscan.com/api?module=account&action=txlist&address={addr}&sort=desc&apikey={POLYGONSCAN_API_KEY}'
    )
    j = r.json()
    return j['result'][0] if j.get('status')=='1' and j.get('result') else None

def get_latest_token_tx(addr):
    r = requests.get(
        f'https://api.polygonscan.com/api?module=account&action=tokentx&address={addr}&sort=desc&apikey={POLYGONSCAN_API_KEY}'
    )
    j = r.json()
    if j.get('status')!='1':
        return None
    for tx in j['result']:
        c = tx['contractAddress'].lower()
        if c in TOKEN_CONTRACTS:
            return tx
    return None

async def check_all_transactions(ctx):
    conn = get_db_conn(); c = conn.cursor()
    rows = c.execute('SELECT chat_id,address,remark,last_tx,last_token_tx FROM bindings').fetchall()

    for chat, addr, remark, ltx, ltt in rows:
        tx = get_latest_tx(addr)
        if tx and tx['hash'] != ltx:
            val = int(tx['value'])/1e18; frm, to = tx['from'].lower(), tx['to'].lower()
            dir = '📥 入账' if to==addr else '📤 出账'; sgn = '+' if dir.startswith('📥') else '-'
            lbl = f"{remark} ({addr})" if remark else addr
            await ctx.bot.send_message(chat_id=chat, text=(
                f"📢 [{lbl}] 新 POL 交易\n"
                f"{dir}: {sgn}{val:.4f} POL\n到账地址: {to}\n🔑 Hash: {tx['hash']}"
            ))
            c.execute('UPDATE bindings SET last_tx=? WHERE chat_id=? AND address=?',(tx['hash'],chat,addr))

        tok = get_latest_token_tx(addr)
        if tok and tok['hash'] != ltt:
            val = int(tok['value'])/(10**int(tok['tokenDecimal']))
            frm, to = tok['from'].lower(), tok['to'].lower()
            dir = '📥 入账' if to==addr else '📤 出账'; sgn = '+' if dir.startswith('📥') else '-'
            sym = TOKEN_CONTRACTS.get(tok['contractAddress'].lower(), 'TOKEN')
            lbl = f"{remark} ({addr})" if remark else addr
            await ctx.bot.send_message(chat_id=chat, text=(
                f"📢 [{lbl}] 新 {sym} 交易\n"
                f"{dir}: {sgn}{val:.4f} {sym}\n到账地址: {to}\n🔑 Hash: {tok['hash']}"
            ))
            c.execute('UPDATE bindings SET last_token_tx=? WHERE chat_id=? AND address=?',(tok['hash'],chat,addr))

    conn.commit(); conn.close()

async def message_handler(update, ctx):
    t = update.message.text.strip()
    m = re.match(r'^/绑定\s+(\S+)(?:\s+(.*))?$', t)
    if m: return await bind_address(update, ctx, m.group(1), m.group(2) or "")
    m = re.match(r'^/解绑\s+(\S+)$', t)
    if m: return await unbind_address(update, ctx, m.group(1))
    if t == '/我的绑定': return await list_bindings(update, ctx)
    if t == '/start':
        return await update.message.reply_text("👋 使用命令：\n/绑定 <地址> <备注>\n/解绑 <地址>\n/我的绑定")
    await update.message.reply_text("❓ 未识别，请发 /start 获取帮助")

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.job_queue.run_repeating(check_all_transactions, interval=CHECK_INTERVAL, first=5)
    print("🤖 Bot 启动")
    app.run_polling()

if __name__ == '__main__':
    main()
