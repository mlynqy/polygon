import os
import sqlite3
import requests
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, filters

# === 配置 ===
TELEGRAM_TOKEN = 'token'
POLYGONSCAN_API_KEY = 'key'
DB_FILE = 'db.sqlite3'
CHECK_INTERVAL = 30

# === 初始化数据库 ===
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS bindings (
            chat_id INTEGER NOT NULL,
            address TEXT NOT NULL,
            remark TEXT,
            last_tx TEXT,
            PRIMARY KEY (chat_id, address)
        )
    ''')
    # 尝试添加 remark 字段（旧用户兼容）
    try:
        c.execute("ALTER TABLE bindings ADD COLUMN remark TEXT")
    except:
        pass
    conn.commit()
    conn.close()

def get_db_conn():
    return sqlite3.connect(DB_FILE)

# === /start ===
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "👋 欢迎使用 Polygon Bot\n"
        "🧾 可用命令：\n"
        "/绑定 <地址> <备注> 绑定地址\n"
        "/解绑 <地址> 删除绑定\n"
        "/我的绑定 查看已绑定地址"
    )

# === /绑定 <地址> <备注> ===
def bind_address(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    if len(context.args) < 1:
        update.message.reply_text("❌ 用法错误：/绑定 <地址> <备注>")
        return

    address = context.args[0].lower()
    remark = " ".join(context.args[1:]) if len(context.args) > 1 else ""

    conn = get_db_conn()
    c = conn.cursor()
    c.execute('''
        INSERT OR REPLACE INTO bindings (chat_id, address, remark)
        VALUES (?, ?, ?)
    ''', (chat_id, address, remark))
    conn.commit()
    conn.close()

    update.message.reply_text(f"✅ 已绑定地址：{address}\n📌 备注：{remark}")

# === /解绑 <地址> ===
def unbind_address(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    if len(context.args) != 1:
        update.message.reply_text("❌ 用法错误：/解绑 <地址>")
        return

    address = context.args[0].lower()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM bindings WHERE chat_id = ? AND address = ?', (chat_id, address))
    conn.commit()
    affected = c.rowcount
    conn.close()

    if affected:
        update.message.reply_text(f"✅ 已解绑地址：{address}")
    else:
        update.message.reply_text(f"⚠️ 未找到绑定：{address}")

# === /我的绑定 ===
def list_bindings(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT address, remark FROM bindings WHERE chat_id = ?', (chat_id,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        update.message.reply_text("📭 当前无绑定")
        return

    msg = "📦 当前绑定地址：\n\n"
    for addr, remark in rows:
        msg += f"🔗 {addr}\n📝 {remark or '无备注'}\n\n"
    update.message.reply_text(msg)

# === 查询地址最新交易 ===
def get_latest_tx(address):
    url = (
        f'https://api.polygonscan.com/api'
        f'?module=account&action=txlist&address={address}'
        f'&startblock=0&endblock=99999999&sort=desc&apikey={POLYGONSCAN_API_KEY}'
    )
    try:
        res = requests.get(url, timeout=10)
        data = res.json()
        if data.get('status') != '1':
            return None
        return data['result'][0]
    except:
        return None

# === 定时轮询交易 ===
def check_all_transactions(context: CallbackContext):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT chat_id, address, remark, last_tx FROM bindings')
    rows = c.fetchall()

    for chat_id, address, remark, last_tx in rows:
        tx = get_latest_tx(address)
        if not tx: continue

        tx_hash = tx['hash']
        if tx_hash == last_tx:
            continue  # 跳过重复

        value = int(tx['value']) / 1e18
        from_addr = tx['from'].lower()
        to_addr = tx['to'].lower()
        direction = '📥 入账' if to_addr == address.lower() else '📤 出账'
        sign = '+' if direction == '📥 入账' else '-'

        label = f"{remark} ({address})" if remark else address
        msg = (
            f"📢 [{label}] 有新交易\n"
            f"{direction}: {sign}{value:.4f} MATIC\n"
            f"🔑 交易哈希: {tx_hash}"
        )
        try:
            context.bot.send_message(chat_id=chat_id, text=msg)
        except Exception as e:
            print(f"❌ 发送失败: {e}")

        c.execute('UPDATE bindings SET last_tx = ? WHERE chat_id = ? AND address = ?', (tx_hash, chat_id, address))

    conn.commit()
    conn.close()

# === 主函数 ===
def main():
    init_db()
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("绑定", bind_address))
    dp.add_handler(CommandHandler("解绑", unbind_address))
    dp.add_handler(CommandHandler("我的绑定", list_bindings))
    dp.add_handler(MessageHandler(filters.text & ~filters.command, lambda u, c: u.message.reply_text("❓ 未识别指令")))

    updater.job_queue.run_repeating(check_all_transactions, interval=CHECK_INTERVAL, first=5)
    print("✅ Bot 已启动")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
